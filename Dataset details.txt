This dataset was created based on the attributes that used in the PROMISE dataset.


Attribute Information:
 	
      1. loc             : numeric % McCabe's line count of code
      2. v(g)            : numeric % McCabe "cyclomatic complexity"
      3. ev(g)           : numeric % McCabe "essential complexity"
      4. iv(g)           : numeric % McCabe "design complexity"
      5. n               : numeric % Halstead total operators + operands
      6. v               : numeric % Halstead "volume"
      7. l               : numeric % Halstead "program length"
      8. d               : numeric % Halstead "difficulty"
      9. i               : numeric % Halstead "intelligence"
     10. e               : numeric % Halstead "effort"
     11. b               : numeric % Halstead 
     12. t               : numeric % Halstead's time estimator
     13. lOCode          : numeric % Halstead's line count
     14. lOComment       : numeric % Halstead's count of lines of comments
     15. lOBlank         : numeric % Halstead's count of blank lines
     16. lOCodeAndComment: numeric
     17. uniq_Op         : numeric % unique operators
     18. uniq_Opnd       : numeric % unique operands
     19. total_Op        : numeric % total operators
     20. total_Opnd      : numeric % total operands
     21: branchCount     : numeric % of the flow graph
     22. defects         : {FALSE,TRUE} % module has/has not one or more reported defects
                                       

Class Distribution: the class value (defects) is discrete
FALSE : 1212 = 30.15%
TRUE : 2808 = 69.85%

Number of instances: 4020

Number of attributes: 22 (5 different lines of code measure, 3 McCabe metrics, 4 base Halstead measures, 8 derived Halstead measures, a branch count, and 1 goal field)



#########################################################################################
The McCabe metrics are a collection of four software metrics: essential complexity, cyclomatic complexity, design complexity, and LOC, Lines of Code.
 
     -- Cyclomatic Complexity, or "v(G)", measures the number of "linearly independent paths". A set of paths is said to be linearly independent if no path in the set is a linear combination of any other paths in the set through a program's "flowgraph". A flowgraph is a directed graph where each node corresponds to a program statement, and each arc indicates the flow of control from one statement to another. "v(G)" is calculated by "v(G) = e - n + 2" where "G" is a program's flowgraph, "e" is the number of arcs in the flowgraph, and "n" is the number of nodes in the flowgraph.
 
     -- McCabe's essential complexity or "ev(G)", focuses on the essential paths that need to be covered during testing or analysis. It is determined by identifying the critical or important paths within a program that are necessary for ensuring its correct functioning. It involves considering the essential decision points and control flow constructs that have a significant impact on program behavior and logic. By analyzing and addressing the essential complexity, developers can focus their testing efforts on the most critical parts of the code and allocate resources efficiently. McCabe's essential complexity is calculated as Ev(g) = V(g) * log2(N)

 
     -- Design Complexity, or "iv(G)", provides a measure of the number of linearly independent paths through a program's source code, which indicates the number of decision points or possible execution paths. It is calculated based on the control flow graph of a program. Each decision point, such as an if statement or a loop, increases the complexity by one. The resulting value represents the number of test cases required to achieve full coverage of the program. McCabe's design complexity is calculated as iv(g) = V(g) / (2^(N/10))
 
     -- Lines of code are measured according to McCabe's line counting conventions.
 
The Halstead falls into three groups: the base measures, the derived measures, and lines of code measures.
     
     -- Base measures: 
        -- n1             = number of distinct operators
        -- n2             = number of distinct operands
        -- N1              = total number of operators
        -- N2              = total number of operands
        -- length     = N  = N1 + N2
        -- vocabulary = n = n1 + n2
 
      -- Derived measures:
         -- volume(v) = N * log2(n)
         -- difficulty(d) = (n1/2) * (N2/n2)
         -- intelligence(i) = v / d
         -- effort(e) = d * v 
         -- bugs(b) = e**(2/3) / 3000
         -- hasltead_b(b) = b / v 
         -- time(t) = e/18 /3600 hours
